{"version":3,"sources":["app.ts"],"names":[],"mappings":";AAsJA,aAvIA,SAAS,IACJ,OAAA,OAAO,WAAW,MACZ,OAAO,WAAW,MAElB,GAGX,SAAS,IACJ,OAAA,OAAO,WAAW,KACZ,OAAO,WAAW,KAElB,EAIX,SAAS,EAAe,EAA0B,GAC7C,OAAA,MAAA,EACM,EAEA,EAIX,SAAS,EAAgB,EAAc,GAClC,GAAM,OAAN,EACM,OAAA,EAAK,GAIhB,SAAS,IAEA,OAAA,EADW,IAAI,gBAAgB,OAAO,SAAS,QACjB,IAAI,SAAU,OAAO,WAAW,cAEvE,SAAS,IAEA,OADP,OAAO,WAAW,MAAQ,IACnB,IAET,SAAS,IACmB,OAAA,SAAS,eAAe,gBAAiB,MAErE,SAAS,IAEA,OADP,OAAO,WAAW,MAAQ,IACnB,IAET,SAAS,IACD,IACA,EAAO,EADK,IAAI,gBAAgB,OAAO,SAAS,QACX,IAAI,QAAS,OAAO,WAAW,aACnE,OAAA,KAAK,KAAK,SAAS,IAE5B,SAAS,IAEA,OADP,OAAO,WAAW,KAAO,IAClB,IAGT,SAAS,IACD,IAAA,EAAiB,IAEvB,EADa,IACY,GACzB,EAAU,SAAS,eAAe,yBACxB,SAAC,GAAS,EAAG,iBAAiB,QAAS,KAEjD,EAAU,SAAS,eAAe,uBACxB,SAAC,GAAS,EAAG,iBAAiB,QAAS,KAInD,SAAS,IAEA,OADW,IAAI,gBAAgB,OAAO,SAAS,QACrC,IAAI,mBAEvB,SAAS,IACJ,GAAA,UAAU,UAAW,CAChB,IACA,EADiD,SAAS,eAAe,UAC/C,YAChC,UAAU,UAAU,UAAU,IAIlC,SAAS,EAAkB,GACnB,IAAA,EAAQ,IACd,EAAmB,IAAW,GAEhC,SAAS,EAAsB,GACvB,IAAA,EAAiC,SAAS,eAAe,gBAC/D,EAAY,MAAQ,EACpB,EAAY,iBAAiB,QAAS,GACtC,EAAU,SAAS,eAAe,iBACxB,SAAC,GAAS,EAAG,iBAAiB,QAAS,WAAa,EAAY,YAI5E,SAAS,EAAoB,EAAgB,GAC3C,EAAU,SAAS,eAAe,iBACxB,SAAC,GAAS,EAAG,UAAY,IAEnC,EAAU,SAAS,eAAe,gBACxB,SAAC,GAAS,EAAG,UAAY,EAAK,aAI1C,SAAS,EAAmB,EAAe,GACnC,IAAA,EAAiD,SAAS,eAAe,UAI3E,GAHJ,EAAQ,EAAM,WAAW,KAAO,EAAQ,IAAM,EAC9C,EAAO,MAAQ,EACf,EAAO,OAAS,EACZ,EAAO,WAAY,CACf,IAAA,EAAwC,EAAO,WAAW,KAAM,CAAE,OAAO,IAC5E,GAAA,EAAK,CACN,EAAI,UAAY,EAChB,EAAI,SAAS,EAAG,EAAG,EAAM,GACzB,EAAoB,EAAO,GAC3B,EAAsB,GACtB,EAAU,SAAS,eAAe,uBACxB,SAAC,GAAS,EAAG,MAAM,gBAAkB,IAE/C,EAAU,SAAS,eAAe,yBACxB,SAAC,GAAS,EAAG,MAAM,gBAAkB,IAEzC,IAAA,EAAU,EAAO,YACe,SAAS,eAAe,WACnD,MAAQ,EAChB,KACD,MAKR,SAAS,EAAmB,GACpB,IACA,EAD6B,SAAS,eAAe,UACrC,UAAU,aAC1B,EAAW,cAAc,OAAO,IAAY,IAAK,IAAU,WAAY,QACvE,EAAyB,EAAE,OACjC,EAAG,SAAW,EACd,EAAG,KAAO,EA3IZ,OAAO,WAAa,CAClB,aAAc,SACd,YAAc,MACd,WAAO,EACP,UAAM,GAyIR,SAAS,iBAAiB,mBAAoB","file":"app.43532264.js","sourceRoot":"../src","sourcesContent":["interface TinySquareConfig {\n  defaultColor : string,\n  defaultSize : string,\n  color : string | undefined,\n  size : number | undefined\n}\n\ninterface Window { tinySquare: TinySquareConfig }\n\nwindow.tinySquare = {\n  defaultColor: \"FF6F61\",\n  defaultSize : \"200\",\n  color: undefined,\n  size: undefined,\n};\nfunction getColor() : string {\n  if(window.tinySquare.color){ \n    return window.tinySquare.color;\n  }else{\n    return \"\";\n  }\n}\nfunction getSize() : number {\n  if(window.tinySquare.size) {\n    return window.tinySquare.size;\n  }else{\n    return 0;\n  }\n}\n\nfunction withDefault<T>(v : T | null | undefined, defaultValue : T) : T {\n  if(v === null || v === undefined) {\n    return defaultValue;\n  }else{\n    return v;\n  }\n}\n\nfunction ifNotNull<T, U>(v : T | null, func : (v : T ) => U) : U | void {\n  if(v !== null) {\n    return func(v);\n  }\n}\n\nfunction getColorFromParam() : string {\n  const urlParams = new URLSearchParams(window.location.search);\n  return withDefault<string>(urlParams.get('color'), window.tinySquare.defaultColor);\n}\nfunction setColorFromParam() : string {\n  window.tinySquare.color = getColorFromParam();\n  return getColor();\n}\nfunction getColorFromPicker() : string {\n  return (<HTMLInputElement>document.getElementById('color-picker')).value;\n}\nfunction setColorFromPicker() : string {\n  window.tinySquare.color = getColorFromPicker();\n  return getColor();\n}\nfunction getSizeFromParam() : number {\n  const urlParams = new URLSearchParams(window.location.search);\n  const size = withDefault<string>(urlParams.get('size'), window.tinySquare.defaultSize);\n  return Math.ceil(parseInt(size));\n}\nfunction setSizeFromParam()  : number {\n  window.tinySquare.size = getSizeFromParam();\n  return getSize();\n}\n\nfunction onLoad() {\n  const color : string = setColorFromParam();\n  const size = setSizeFromParam();\n  handleSizeAndColor(size, color);\n  ifNotNull(document.getElementById('download-image-button'),\n            (el) => { el.addEventListener(\"click\", downloadTinySquare); }\n           );\n  ifNotNull(document.getElementById('dataurl-copy-button'),\n            (el) => { el.addEventListener(\"click\", copyDataURLToClipboard); }\n           );\n}\n\nfunction shouldAutoCopyDataUrl() {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.has('autocopydataurl');\n}\nfunction copyDataURLToClipboard() {\n  if(navigator.clipboard) {\n    const canvas : HTMLCanvasElement = <HTMLCanvasElement> document.getElementById('canvas');\n    const dataURL : string = canvas.toDataURL();\n    navigator.clipboard.writeText(dataURL);\n  }\n}\n\nfunction colorPickerChange(e : Event) {\n  const color = setColorFromPicker();\n  handleSizeAndColor(getSize(), color);\n}\nfunction initializeColorPicker(color : string) {\n  const colorPicker = <HTMLInputElement> document.getElementById('color-picker');\n  colorPicker.value = color;\n  colorPicker.addEventListener(\"input\", colorPickerChange);\n  ifNotNull(document.getElementById('color-display'),\n            (el) => { el.addEventListener('click', function() { colorPicker.click(); }) }\n           );\n}\n\nfunction displayColorAndSize(color : string, size : number) {\n  ifNotNull(document.getElementById('color-display'),\n            (el) => { el.innerText = color }\n           );\n  ifNotNull(document.getElementById('size-display'),\n            (el) => { el.innerText = size.toString() }\n           );\n}\n\nfunction handleSizeAndColor(size : number, color : string) {\n  const canvas : HTMLCanvasElement = <HTMLCanvasElement> document.getElementById('canvas');\n  color = color.startsWith(\"#\") ? color : \"#\" + color;\n  canvas.width = size;\n  canvas.height = size;\n  if (canvas.getContext) {\n    const ctx : CanvasRenderingContext2D | null = canvas.getContext('2d', { alpha: false });\n    if(ctx) {\n      ctx.fillStyle = color;\n      ctx.fillRect(0, 0, size, size);\n      displayColorAndSize(color, size);\n      initializeColorPicker(color);\n      ifNotNull(document.getElementById('dataurl-copy-button'), \n                (el) => { el.style.backgroundColor = color}\n               ) ;\n      ifNotNull(document.getElementById('download-image-button'),\n                (el) => { el.style.backgroundColor = color}\n               );\n      const dataUrl = canvas.toDataURL();\n      const dataUrlTag = <HTMLInputElement> document.getElementById('dataurl');\n      dataUrlTag.value = dataUrl;\n      if(shouldAutoCopyDataUrl()){\n        copyDataURLToClipboard();\n      }\n    }\n  }\n}\nfunction downloadTinySquare(e : Event) {\n  const canvas = <HTMLCanvasElement> document.getElementById('canvas');\n  const image =  canvas.toDataURL(\"image/jpg\");\n  const filename = 'tinysquare-'.concat(getColor(), '-', getSize().toString(), '.png');\n  const el = <HTMLAnchorElement> e.target;\n  el.download = filename;\n  el.href = image;\n}\ndocument.addEventListener(\"DOMContentLoaded\", onLoad);\n"]}